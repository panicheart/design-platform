{"ast":null,"code":"var _jsxFileName = \"/Users/tancong/Code/frontend/src/contexts/LanguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { translations } from '../i18n/translations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState('en');\n  const t = key => {\n    const keys = key.split('.');\n    let value = translations[language];\n    for (const k of keys) {\n      var _value;\n      value = (_value = value) === null || _value === void 0 ? void 0 : _value[k];\n    }\n    return value || key;\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage,\n      t\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","translations","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","t","key","keys","split","value","k","_value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/Users/tancong/Code/frontend/src/contexts/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { translations } from '../i18n/translations';\n\ntype Language = 'en' | 'zh';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const t = (key: string) => {\n    const keys = key.split('.');\n    let value: any = translations[language];\n    \n    for (const k of keys) {\n      value = value?.[k];\n    }\n    \n    return value || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,YAAY,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUpD,MAAMC,eAAe,gBAAGN,aAAa,CAAkCO,SAAS,CAAC;AAEjF,OAAO,MAAMC,gBAAyD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAW,IAAI,CAAC;EAExD,MAAMW,CAAC,GAAIC,GAAW,IAAK;IACzB,MAAMC,IAAI,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC3B,IAAIC,KAAU,GAAGd,YAAY,CAACQ,QAAQ,CAAC;IAEvC,KAAK,MAAMO,CAAC,IAAIH,IAAI,EAAE;MAAA,IAAAI,MAAA;MACpBF,KAAK,IAAAE,MAAA,GAAGF,KAAK,cAAAE,MAAA,uBAALA,MAAA,CAAQD,CAAC,CAAC;IACpB;IAEA,OAAOD,KAAK,IAAIH,GAAG;EACrB,CAAC;EAED,oBACET,OAAA,CAACC,eAAe,CAACc,QAAQ;IAACH,KAAK,EAAE;MAAEN,QAAQ;MAAEC,WAAW;MAAEC;IAAE,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACd,EAAA,CAnBWF,gBAAyD;AAAAiB,EAAA,GAAzDjB,gBAAyD;AAqBtE,OAAO,MAAMkB,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAG3B,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAIsB,OAAO,KAAKrB,SAAS,EAAE;IACzB,MAAM,IAAIsB,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}