{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  tasks: [],\n  currentTask: null,\n  loading: false,\n  error: null\n};\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    fetchTasksStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTasksSuccess: (state, action) => {\n      state.loading = false;\n      state.tasks = action.payload;\n    },\n    fetchTasksFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentTask: (state, action) => {\n      state.currentTask = action.payload;\n    },\n    addTask: (state, action) => {\n      state.tasks.push(action.payload);\n    },\n    updateTask: (state, action) => {\n      const index = state.tasks.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    },\n    deleteTask: (state, action) => {\n      state.tasks = state.tasks.filter(t => t._id !== action.payload);\n    },\n    addComment: (state, action) => {\n      const task = state.tasks.find(t => t._id === action.payload.taskId);\n      if (task) {\n        task.comments.push(action.payload.comment);\n      }\n    },\n    updateProgress: (state, action) => {\n      const task = state.tasks.find(t => t._id === action.payload.taskId);\n      if (task) {\n        task.progress = action.payload.progress;\n      }\n    }\n  }\n});\nexport const {\n  fetchTasksStart,\n  fetchTasksSuccess,\n  fetchTasksFailure,\n  setCurrentTask,\n  addTask,\n  updateTask,\n  deleteTask,\n  addComment,\n  updateProgress\n} = taskSlice.actions;\nexport default taskSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","currentTask","loading","error","taskSlice","name","reducers","fetchTasksStart","state","fetchTasksSuccess","action","payload","fetchTasksFailure","setCurrentTask","addTask","push","updateTask","index","findIndex","t","_id","deleteTask","filter","addComment","task","find","taskId","comments","comment","updateProgress","progress","actions","reducer"],"sources":["/Users/tancong/Code/frontend/src/store/slices/taskSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface Comment {\n  user: {\n    _id: string;\n    username: string;\n    email: string;\n  };\n  content: string;\n  timestamp: string;\n}\n\ninterface Task {\n  _id: string;\n  title: string;\n  description: string;\n  type: 'new_product' | 'model_development' | 'circuit_verification' | 'issue_handling' | 'testing' | 'technical_cooperation';\n  status: 'planning' | 'in_progress' | 'review' | 'completed' | 'on_hold';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  assignedTo: {\n    _id: string;\n    username: string;\n    email: string;\n  };\n  createdBy: {\n    _id: string;\n    username: string;\n    email: string;\n  };\n  startDate: string;\n  dueDate: string;\n  progress: number;\n  requirements: {\n    input: string[];\n    output: string[];\n  };\n  documents: {\n    type: string;\n    url: string;\n    name: string;\n  }[];\n  comments: Comment[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TaskState {\n  tasks: Task[];\n  currentTask: Task | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: TaskState = {\n  tasks: [],\n  currentTask: null,\n  loading: false,\n  error: null,\n};\n\nconst taskSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    fetchTasksStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchTasksSuccess: (state, action: PayloadAction<Task[]>) => {\n      state.loading = false;\n      state.tasks = action.payload;\n    },\n    fetchTasksFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentTask: (state, action: PayloadAction<Task>) => {\n      state.currentTask = action.payload;\n    },\n    addTask: (state, action: PayloadAction<Task>) => {\n      state.tasks.push(action.payload);\n    },\n    updateTask: (state, action: PayloadAction<Task>) => {\n      const index = state.tasks.findIndex(t => t._id === action.payload._id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    },\n    deleteTask: (state, action: PayloadAction<string>) => {\n      state.tasks = state.tasks.filter(t => t._id !== action.payload);\n    },\n    addComment: (state, action: PayloadAction<{ taskId: string; comment: Comment }>) => {\n      const task = state.tasks.find(t => t._id === action.payload.taskId);\n      if (task) {\n        task.comments.push(action.payload.comment);\n      }\n    },\n    updateProgress: (state, action: PayloadAction<{ taskId: string; progress: number }>) => {\n      const task = state.tasks.find(t => t._id === action.payload.taskId);\n      if (task) {\n        task.progress = action.payload.progress;\n      }\n    },\n  },\n});\n\nexport const {\n  fetchTasksStart,\n  fetchTasksSuccess,\n  fetchTasksFailure,\n  setCurrentTask,\n  addTask,\n  updateTask,\n  deleteTask,\n  addComment,\n  updateProgress,\n} = taskSlice.actions;\n\nexport default taskSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}